"""
InvenioRDM settings for inveniordm_jlab project.
This file was automatically generated by 'invenio-cli init'.
For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from invenio_i18n import lazy_gettext as _


def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['inveniordm.jlab.org', 'localhost', '127.0.0.1']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://inveniordm_jlab:inveniordm_jlab@localhost/inveniordm_jlab"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'US/Eastern'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]
THEME_SHOW_FRONTPAGE_INTRO_SECTION = False

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "Research Data Repository for Jefferson Lab"
# Header logo
THEME_LOGO = 'images/invenio-rdm.svg'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://inveniordm.jlab.org"

SITE_API_URL = "https://inveniordm.jlab.org/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "inveniordm_jlab",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "inveniordm.jlab.org"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "inveniordm_jlab-"

# Permissions
# ============
from inveniordm_jlab.permissions import JLABCommunitiesPermissionPolicy, JLABRecordPermissionPolicy

COMMUNITIES_PERMISSION_POLICY = JLABCommunitiesPermissionPolicy
RDM_PERMISSION_POLICY = JLABRecordPermissionPolicy

# Custom Fields
# =============

from invenio_records_resources.services.custom_fields import (
    BaseCF,
    BooleanCF,
    DoubleCF,
    EDTFDateStringCF,
    IntegerCF,
    ISODateStringCF,
    KeywordCF,
    TextCF,
)
from invenio_records_resources.services.records.facets import (
    CFTermsFacet,
    NestedTermsFacet,
)
from invenio_records_resources.services.records.facets.facets import CFNestedTermsFacet
    
from invenio_rdm_records.config import RDM_FACETS, RDM_SEARCH, RDM_SORT_OPTIONS

from invenio_rdm_records.services.schemas.metadata import _valid_url
from invenio_vocabularies.services.custom_fields import VocabularyCF
from invenio_vocabularies.services.facets import VocabularyLabels
from marshmallow_utils.fields.edtfdatestring import EDTFValidator
from marshmallow import ValidationError
from marshmallow_utils.fields import SanitizedHTML

from invenio_rdm_records.contrib.imprint import (
    IMPRINT_CUSTOM_FIELDS,
    IMPRINT_CUSTOM_FIELDS_UI,
    IMPRINT_NAMESPACE,
)
from invenio_rdm_records.contrib.journal import (
    JOURNAL_CUSTOM_FIELDS,
    JOURNAL_CUSTOM_FIELDS_UI,
    JOURNAL_NAMESPACE,
)
from invenio_rdm_records.contrib.thesis import (
    THESIS_CUSTOM_FIELDS,
    THESIS_CUSTOM_FIELDS_UI,
    THESIS_NAMESPACE,
)
from invenio_rdm_records.contrib.meeting import (
    MEETING_CUSTOM_FIELDS,
    MEETING_CUSTOM_FIELDS_UI,
    MEETING_NAMESPACE,
)


#
# Namespaces
#

RDM_NAMESPACES = {
    **JOURNAL_NAMESPACE,
    **IMPRINT_NAMESPACE,
    **THESIS_NAMESPACE,
    **MEETING_NAMESPACE,
    "pac": "",
    "rdm": "",
}

#
# Records custom fields
#


RDM_CUSTOM_FIELDS = [
    # pac related custome field.
    IntegerCF(name="pac:pac_number"),
    DoubleCF(name="pac:beam_days"),
    TextCF(name="pac:proposal_number"),
    IntegerCF(name="pac:pacID"),
    
    VocabularyCF(
        name="pac:pac_status",
        vocabulary_id="pac_status",
        dump_options=True,
        multiple=False,
    ),
    VocabularyCF(
        name="pac:pac_rating",
        vocabulary_id="pac_rating",
        dump_options=True,
        multiple=False,
    ),
    VocabularyCF(
        name="rdm:beam",
        vocabulary_id="beam",
        dump_options=True,
        multiple=False,
    ),
    VocabularyCF(
        name="rdm:target",
        vocabulary_id="target",
        dump_options=True,
        multiple=False,
    ),
    TextCF(name="rdm:target_info"),
    BooleanCF(name="rdm:polarized_target"),
    BooleanCF(name="rdm:polarized_beam"),

    # publication related custom_field.
    VocabularyCF(
        name="rdm:division",
        vocabulary_id="division",
        dump_options=True,
        multiple=True,
    ),
    TextCF(name="rdm:full_division"),
    TextCF(name="rdm:experiment_number", multiple=True),
    KeywordCF(name="rdm:jlab_number"),
    KeywordCF(name="rdm:osti_number"),
    KeywordCF(name="rdm:other_number"),
    KeywordCF(name="rdm:lanl_number"),
    BooleanCF(name="rdm:isldrd"),
    KeywordCF(name="rdm:ldrd_number"),
    IntegerCF(name="rdm:pubID"),
    TextCF(name="rdm:expID", multiple=True),

    # result related custom fields.
    DoubleCF(name="rdm:Q2min"),
    DoubleCF(name="rdm:Q2max"),
    DoubleCF(name="rdm:Wmin"),
    DoubleCF(name="rdm:Wmax"),
    DoubleCF(name="rdm:Wmin"),
#    VocabularyCF(
#        name="rdm:collision",
#        vocabulary_id="collision",
#        dump_options=True,
#        multiple=False,
#    ),
    *JOURNAL_CUSTOM_FIELDS,
    # meeting
    *MEETING_CUSTOM_FIELDS,
    # imprint
    *IMPRINT_CUSTOM_FIELDS,
    # thesis
    *THESIS_CUSTOM_FIELDS,
]


RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("PAC"),
        "fields": [
            dict(
                field="pac:pac_number",
                ui_widget="NumberInput",
                props=dict(
                    label="PAC number",
                    placeholder="Related PAC Number",
                    icon="calculator",
                    description="Insert the integer, Its the PAC Number.",
                )
            ),
            dict(
                field="pac:beam_days",
                ui_widget="NumberInput",
                props=dict(
                    label="Beam Days",
                    placeholder="Number of Beam Days",
                    icon="book",
                    description="Insert the integer Number of Beam Day",
                )
            ),
            dict(
                field="pac:proposal_number",
                ui_widget="Input",
                props=dict(
                    label="Proposal Number",
                    placeholder="",
                    icon="tag",
                    description="The PAC proposal Number",
                )
            ),
            dict(
                field="pac:pac_status",
                ui_widget="Dropdown",  # predefined widget
                props=dict(
                    label="PAC Status",
                    placeholder="A, AT, C1",
                    icon="group",
                    description="Find more at repostatus.org",
                    search=False,
                    multiple=False,
                    clearable=True
                )
            ),
            dict(
                field="pac:pac_rating",
                ui_widget="Dropdown",  # predefined widget
                props=dict(
                    label="PAC rating",
                    placeholder="A, A-, C+",
                    icon="group",
                    search=False,
                    multiple=False,
                    clearable=True
                )
            )
        ]
    },
    {
        "section": _("Beam and Target"),
        "fields": [
            dict(
                field="rdm:target",
                ui_widget="Dropdown",  # predefined widget
                props=dict(
                    label="Target",
                    icon="tag",
                    description="Target Used in Fixed Target experiment",
                    search=False,
                    multiple=False,
                    clearable=True
                )
            ),
            dict(
                field="rdm:target_info",
                ui_widget="RichInput",  # predefined widget
                props=dict(
                    label="Description of Target(s)",
                    icon="pencil",
                    description="Description of target(s) used",
                )
            ),
            dict(
                field="rdm:polarized_target",
                ui_widget="BooleanCheckbox",  # predefined widget
                props=dict(
                    label="Polarized Target",
                    trueLabel="Yes",
                    falseLabel="No",
                    icon="tag",
                    description="Mark if the target used is polarized.",
                )
            ),
            dict(
                field="rdm:beam",
                ui_widget="Dropdown",  # predefined widget
                props=dict(
                    label="Beam",
                    icon="tag",
                    description="Beam used",
                    search=False,
                    multiple=False,
                    clearable=True
                )
            ),
            dict(
                field="rdm:polarized_beam",
                ui_widget="BooleanCheckbox",  # predefined widget
                props=dict(
                    label="Polarized Beam",
                    trueLabel="Yes",
                    falseLabel="No",
                    icon="tag",
                    description="Mark if the beam used is polarized.",
                )
            )
        ]
    },
    {
        "section": _("Division and Experiment"),
        "fields": [
            dict(
                field="rdm:experiment_number",
                ui_widget="Input",
                props=dict(
                    label="Experiment Number",
                    placeholder="",
                    icon="tag",
                    multiple=True,
                    description="The Experiment Number",
                )
            ),
            dict(
                field="rdm:division",
                ui_widget="Dropdown",
                props=dict(
                    label="Division",
                    icon="lab", 
                    description="The associated JLab Division",
                    search=False,
                    multiple=True,
                    clearable=True
                )
            ),
            dict(
                field="rdm:full_division",
                ui_widget="Input",
                props=dict(
                    label="Full Division Name",
                    placeholder="",
                    icon="tag",
                    description="The Full Division Name",
                )
            ),
        ]
    },
    {
        "section": _("Document Number External"),
        "fields": [
            dict(
                field="rdm:jlab_number",
                ui_widget="Input",
                props=dict(
                    label="JLab Document Number",
                    placeholder="",
                    icon="tag",
                    description="The JLab Document Number",
                )
            ),
            dict(
                field="rdm:osti_number",
                ui_widget="Input",
                props=dict(
                    label="OSTI Number",
                    placeholder="",
                    icon="tag",
                    description="The OSTI Number",
                )
            ),
            dict(
                field="rdm:other_number",
                ui_widget="Input",
                props=dict(
                    label="Other Number",
                    placeholder="",
                    icon="tag",
                    description="Other Number",
                )
            ),
            dict(
                field="rdm:lanl_number",
                ui_widget="Input",
                props=dict(
                    label="LANL Document Number",
                    placeholder="",
                    icon="tag",
                    description="The LANL Number",
                )
            ),
            dict(
                field="rdm:isldrd",
                ui_widget="BooleanCheckbox",  # predefined widget
                props=dict(
                    label="is LDRD",
                    trueLabel="Yes",
                    falseLabel="No",
                    icon="tag",
                    description="Mark if the document is LDRD.",
                )
            ),
            dict(
                field="rdm:ldrd_number",
                ui_widget="Input",  # predefined widget
                props=dict(
                    label="LDRD Number",
                    icon="tag",
                    description="The LDRD Number",
                )
            ),
        ]
    },
    {
        "section": _("Result Info"),
        "fields": [
            dict(
                field="rdm:Q2min",
                ui_widget="Input",  # predefined widget
                props=dict(
                    label="Minimum Q2 in GeV",
                    icon="tag",
                    description="Minimium invariant momentum transfer Value in GeV",
                )
            ),
            dict(
                field="rdm:Q2max",
                ui_widget="Input",  # predefined widget
                props=dict(
                    label="Maximum Q2 in GeV",
                    icon="tag",
                    description="Maximum invariant momentum transfer Value in GeV",
                )
            ),
            dict(
                field="rdm:Wmin",
                ui_widget="Input",  # predefined widget
                props=dict(
                    label="Minimum center-of-mass",
                    icon="tag",
                    description="Minimum center-of-mass Value in GeV",
                )
            ),
            dict(
                field="rdm:Wmax",
                ui_widget="Input",  # predefined widget
                props=dict(
                    label="Miximum Q2 in GeV",
                    icon="tag",
                    description="Maximum center-of-mass Value in GeV",
                )
            ),
        ]
    },
    {
        "section": _("Publishing information"),
        "hidden": True,
        "fields": [
            # journal
            *JOURNAL_CUSTOM_FIELDS_UI["fields"],
            # imprint
            *IMPRINT_CUSTOM_FIELDS_UI["fields"],
            # thesis
            *THESIS_CUSTOM_FIELDS_UI["fields"],
        ],
    },
    MEETING_CUSTOM_FIELDS_UI,

]


RDM_FACETS = {
    **RDM_FACETS,
    "pac_status": {
        "facet": CFTermsFacet(
            field="pac:pac_status.id",
            label=_("Pac Status"),
            value_labels=VocabularyLabels("pac_status"),
        ),
        "ui": {
            "field": CFTermsFacet.field("pac:pac_status"),
        },
    },
    "pac_rating": {
        "facet": CFTermsFacet(
            field="pac:pac_rating.id",
            label=_("Pac Rating"),
            value_labels=VocabularyLabels("pac_rating"),
        ),
        "ui": {
            "field": CFTermsFacet.field("pac:pac_rating"),
        },
    },
     "target": {
        "facet": CFTermsFacet(
            field="rdm:target.id",
            label=_("target"),
            value_labels=VocabularyLabels("target"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rdm:target"),
        },
    },
    "beam": {
        "facet": CFTermsFacet(
            field="rdm:beam.id",
            label=_("beam"),
            value_labels=VocabularyLabels("beam"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rdm:beam"),
        },
    },
    "division": {
        "facet": CFTermsFacet(
            field="rdm:division.id",
            label=_("Division"),
            value_labels=VocabularyLabels("division"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rdm:division"),
        },
    },
}

RDM_SEARCH = {
    **RDM_SEARCH,
    "facets": RDM_SEARCH["facets"] + ["target", "beam", "division", "pac_status", "pac_rating"] 
}

RDM_ALLOW_METADATA_ONLY_RECORDS = True

#
# Communities custom fields
#

COMMUNITIES_CUSTOM_FIELDS = [
    TextCF(
        name="rdm:external_url",
        field_args={"validate": _valid_url(_("Not a valid URL."))},
    ),
    TextCF(name="rdm:policy"),
]

COMMUNITIES_CUSTOM_FIELDS_UI = [
    {
        "section": _("Other details"),
        "fields": [
            dict(
                field="rdm:external_url",
                ui_widget="Input",
                props=dict(
                    label="External URL",
                    placeholder="https://your.community.url",
                    icon="linkify",
                    description="External URL of the community...",
                )
            ),
            dict(
                field="rdm:policy",
                ui_widget="RichInput",
                props=dict(
                    label="Policy",
                    placeholder="For a record to be accepted into this community it must...",
                    icon="pencil",
                    description="Conditions for a record to be accepted into the community",
                )
            ),
        ]
    }
]


#rate limiting API
RATELIMIT_PER_ENDPOINT = {
    "records.create": "25000 per hour;1000 per minute",
    "records.publish": "25000 per hour;1000 per minute",
    "draft_files.create": "25000 per hour;1000 per minute",
    "draft_files.update_content": "25000 per hour;1000 per minute",
    "draft_files.create_commit": "25000 per hour;1000 per minute"
}

# logging
## file
### Enable logging to the filesystem.
LOGGING_FS_LOGFILE = None

### Enable logging of Python warnings to filesystem logging.
LOGGING_FS_PYWARNINGS = False

### Number of rotated log files to keep.
LOGGING_FS_BACKUPCOUNT = 5

### Maximum size of logging file. Default: 100MB.

LOGGING_FS_MAXBYTES = 100 * 1024 * 1024

### Filesystem logging level.
#### "CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG", or "NOTSET".
LOGGING_FS_LEVEL = None

 